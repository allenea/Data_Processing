## Eric Allen 2017 NWS Student Volunteer, Sterling WFO ## Universiy of Delaware## Last Updated: 8/15/2017## Contact: allenea@udel.edu#==============================================================================# This file processes data from each of the stations that is stored within the# this script is run from. In the end you will have a csv file that adds a column # to hold time in julien time (originally thought that might be a way to iterate \# throught the data), but at this time I do not plan on using it. Instead I added a column for# booleans True == 1 &   False == 0, for whether or not FZRN (freezing rain) was# occuring at that location and I did the same for cloud cover (all types).  Then this file removes# lines of data that have REPORTTYPE "SOD" as these are bad data points and mess up the sequence# Finally, I remove "s" character from the data file. "S" can be found next to a value that NCDC# Declared to be suspect. After a brief skip of the data these points seem realistic enough that # any error in the data will not be significant enough to impact our ability to search for CAD events##  NOTE: #    1) RUN FROM THE DIRECTORY CONTAINING THE DATA#    2) File paths need to be UPDATED depending on the computer (outstring)#    3) Changes may need to be made if using python 3 or newer## #==============================================================================import pandas as pdimport csvimport numpy as npimport globfrom dateutil.parser import parseimport os# Outer loop to do for each file### SET PATHSwkdir =   os.getcwd()+"/Raw/"  ### SET PATHSoutdir = os.getcwd()+'/Reformatted/'os.chdir(wkdir)for file in glob.glob("*.csv"):    print (file)    #%% Read In Data    data2 = pd.read_csv(file, low_memory=False)    data2.columns.tolist()    Date = data2['DATE']    # Store filename without '.csv'        print ("Editing " + file)    name = file[:-4]    # New array to store all data    data = []    # Read data from file and save to use    #ERIC: Changed 'rb' to 'rt' (read text),        #THEN TO 'rU' for unknown reason? Each have worked at one point in time.    with open(file,'r') as infile:        raw = csv.reader(infile,dialect='excel',delimiter=',')        print(raw)        for row in raw:            row2 = row[0:38]            data.append(row2)    # Get rid of headers    data = data[1:]        year_raw  = []    month_raw = []    day_raw   = []    hour_raw  = []    min_raw   = []     ParseTime = []    sizeNew = int(len(Date))    for i in range(sizeNew):            d = parse(Date[i])            #uTime = time.mktime(d.timetuple())            ParseTime.append(d)            year_raw.append(d.year)            month_raw.append(d.month)            day_raw.append(d.day)            hour_raw.append(d.hour)            min_raw.append(d.minute)            data2['DATE'] = ParseTime    DATA = np.array(data)            year_raw = np.array(year_raw)    month_raw = np.array(month_raw)    day_raw = np.array(day_raw)    hour_raw = np.array(hour_raw)    min_raw = np.array(min_raw)    #%% FIX DATA: REMOVE ROWS WITH REPORTTYPE "SOD"    REPORTTPYERROR = DATA[:,6]    #print REPORTTPYERROR    tSize  = len(REPORTTPYERROR)    # FIND BAD DATA    findSOD = []    for ii in range(0,tSize):        if (REPORTTPYERROR[ii] == 'SOD'):            findSOD.append(ii)    DATA = np.delete(DATA,(findSOD), axis=0)    DATA = np.array(DATA)    year_raw = np.delete(year_raw,(findSOD), axis=0)    month_raw = np.delete(month_raw,(findSOD), axis=0)    day_raw = np.delete(day_raw,(findSOD), axis=0)    hour_raw = np.delete(hour_raw,(findSOD), axis=0)    min_raw = np.delete(min_raw,(findSOD), axis=0)        #######################################################################        #%%FIX TO REMOVE designation for "S" = suspect values.     # Load In Data     STATION = DATA[:,0]    STATION_NAME = DATA[:,1]    ELEVATION = DATA[:,2]    LATITUDE = DATA[:,3]    LONGITUDE = DATA[:,4]    #DATE = DATA[:,5]    REPORTTPYE = DATA[:,6]    SKY = DATA[:,7]    HOURLYVISIBILITY = DATA[:,8]    PRECIP = DATA[:,9]    HOURLYDRYBULBTEMPF = DATA[:,10]    HOURLYDRYBULBTEMPC = DATA[:,11]    HOURLYWETBULBTEMPF = DATA[:,12]    HOURLYWETBULBTEMPC = DATA[:,13]    HOURLYDewPointTempF = DATA[:,14]    HOURLYDewPointTempC = DATA[:,15]    HOURLYRelativeHumidity =DATA[:,16]    HOURLYWindSpeed = DATA[:,17]    HOURLYWindDirection = DATA[:,18]    HOURLYWindGustSpeed = DATA[:,19]    HOURLYStationPressure = DATA[:,20]    HOURLYPressureTendency = DATA[:,21]    HOURLYPressureChange = DATA[:,22]    HOURLYSeaLevelPressure = DATA[:,23]    HOURLYPrecip = DATA[:,24]    HOURLYAltimeterSetting  = DATA[:,25]    DAILYMaximumDryBulbTemp = DATA[:,26]    DAILYMinimumDryBulbTemp = DATA[:,27]    DAILYAverageDryBulbTemp = DATA[:,28]    DAILYDeptFromNormalAverageTemp = DATA[:,29]    DAILYAverageRelativeHumidity = DATA[:,30]    DAILYAverageDewPointTemp = DATA[:,31]    DAILYAverageWetBulbTemp = DATA[:,32]    DAILYHeatingDegreeDays = DATA[:,33]    DAILYCoolingDegreeDays = DATA[:,34]    DAILYSunrise = DATA[:,35]    DAILYSunset = DATA[:,36]    DAILYWeather = DATA[:,37]    #%%    FZRN_FOUND = list(np.zeros(len(hour_raw)))    count =0    for index,stringPrecip in enumerate(PRECIP):        boolSearch = False        if stringPrecip == 'nan' or stringPrecip == ' ':            boolSearch = False        else:            stringPrecip = str(stringPrecip)            for sIndex in range(len(stringPrecip)):                if stringPrecip[sIndex:sIndex+2] =='FZ':                    boolSearch = True                    #print "Found"                    count = count +1                else:                    continue                        if boolSearch == True:            FZRN_FOUND[index] = 1        else:             FZRN_FOUND[index] = 0    #%%    CLOUD_FOUND = list(np.zeros(len(hour_raw)))    count2 =0    for index2,stringSKY in enumerate(SKY):        boolSearch2 = False        if stringSKY != 'CLR:00' or stringSKY != ' ':            boolSearch2 = True        else:            boolSearch2 = False                        if boolSearch2 == True:            CLOUD_FOUND[index2] = 1        else:             CLOUD_FOUND[index2] = 0        #%%    VARIABLE = DAILYHeatingDegreeDays    ijk = 0;    tmpVariable = list(HOURLYVISIBILITY)    for string in HOURLYVISIBILITY:        string = str(string).lstrip().rstrip()        if string[-1:] == 's':            endSpot = len(string)            tmpVariable[ijk]=string[0:endSpot-1]        if string == '':            tmpVariable[ijk]=np.nan        if string == ' ':            tmpVariable[ijk]=np.nan        if string == '*':            tmpVariable[ijk]=np.nan        if string[-1:] == 'V':            endSpot = len(string)            tmpVariable[ijk]=string[0:endSpot-1]         if string == 'VRB': # VARIABLE            tmpVariable[ijk]=np.nan         if string == 'T': #TRACE            tmpVariable[ijk]=np.nan        if string == '* ||': #TRACE            tmpVariable[ijk]=np.nan        if string ==  ' 0.25V':            tmpVariable[ijk]=np.nan        if string ==  ' 2.50V':            tmpVariable[ijk]=np.nan        if string ==  ' 0.25s':            tmpVariable[ijk]=np.nan        if string ==  '0.25s':            tmpVariable[ijk]=np.nan        if string ==  ' *':            tmpVariable[ijk]=np.nan        ijk = ijk+1            VARIABLE = np.array(tmpVariable)    DATA[:,8] = VARIABLE    #DATA[:,8] = VARIABLE.astype(float)    #%% Remove S in all columns of data with suspect data (or potenital to have suspect data)    list2Check = [HOURLYDRYBULBTEMPF,HOURLYDRYBULBTEMPC,HOURLYWETBULBTEMPF,HOURLYWETBULBTEMPC,                  HOURLYDewPointTempF,HOURLYDewPointTempC,HOURLYRelativeHumidity,HOURLYWindSpeed,                  HOURLYWindDirection, HOURLYWindGustSpeed, HOURLYStationPressure,HOURLYPressureTendency,                  HOURLYPressureChange,HOURLYSeaLevelPressure, HOURLYPrecip, HOURLYAltimeterSetting, DAILYMaximumDryBulbTemp,                  DAILYMinimumDryBulbTemp, DAILYAverageDryBulbTemp, DAILYDeptFromNormalAverageTemp, DAILYAverageRelativeHumidity,                  DAILYAverageDewPointTemp, DAILYAverageWetBulbTemp, DAILYHeatingDegreeDays, DAILYCoolingDegreeDays, DAILYSunrise,                  DAILYSunset]    VARIABLE = DAILYHeatingDegreeDays    for variable in range(len(list2Check)):        ijk = 0;        tmpVariable = list(list2Check[variable])        for string in list2Check[variable]:            string = str(string)            if string[-1:] == 's':                endSpot = len(string)                tmpVariable[ijk]=string[0:endSpot-1]            if string == '':                tmpVariable[ijk]=np.nan            if string == ' ':                tmpVariable[ijk]=np.nan            if string == '*':                tmpVariable[ijk]=np.nan            if string[-1:] == 'V':                endSpot = len(string)                tmpVariable[ijk]=string[0:endSpot-1]             if string == 'VRB': # VARIABLE                tmpVariable[ijk]=np.nan             if string == 'T': #TRACE                tmpVariable[ijk]=np.nan            if string == '* ||': #TRACE                tmpVariable[ijk]=np.nan            if string == '0.030.05':                tmpVariable[ijk]=np.nan            ijk = ijk +1;        VARIABLE = np.array(tmpVariable)        if variable == 14:            DATA[:,variable+10] = VARIABLE        else:               DATA[:,variable+10] = VARIABLE.astype(float)        VARIABLE = np.array(tmpVariable)                    STATION = DATA[:,0]    STATION_NAME = DATA[:,1]    ELEVATION = DATA[:,2]    LATITUDE = DATA[:,3]    LONGITUDE = DATA[:,4]    #DATE = DATA[:,5]    REPORTTPYE = DATA[:,6]    HOURLYSKYCONDITIONS = DATA[:,7]    HOURLYVISIBILITY = DATA[:,8]    PRECIP = DATA[:,9]    HOURLYDRYBULBTEMPF = DATA[:,10]    HOURLYDRYBULBTEMPC = DATA[:,11]    HOURLYWETBULBTEMPF = DATA[:,12]    HOURLYWETBULBTEMPC = DATA[:,13]    HOURLYDewPointTempF = DATA[:,14]    HOURLYDewPointTempC = DATA[:,15]    HOURLYRelativeHumidity =DATA[:,16]    HOURLYWindSpeed = DATA[:,17]    HOURLYWindDirection = DATA[:,18]    HOURLYWindGustSpeed = DATA[:,19]    HOURLYStationPressure = DATA[:,20]    HOURLYPressureTendency = DATA[:,21]    HOURLYPressureChange = DATA[:,22]    HOURLYSeaLevelPressure = DATA[:,23]    HOURLYPrecip = DATA[:,24]    HOURLYAltimeterSetting  = DATA[:,25]    DAILYMaximumDryBulbTemp = DATA[:,26]    DAILYMinimumDryBulbTemp = DATA[:,27]    DAILYAverageDryBulbTemp = DATA[:,28]    DAILYDeptFromNormalAverageTemp = DATA[:,29]    DAILYAverageRelativeHumidity = DATA[:,30]    DAILYAverageDewPointTemp = DATA[:,31]    DAILYAverageWetBulbTemp = DATA[:,32]    DAILYHeatingDegreeDays = DATA[:,33]    DAILYCoolingDegreeDays = DATA[:,34]    DAILYSunrise = DATA[:,35]    DAILYSunset = DATA[:,36]    DAILYWeather = DATA[:,37]            #%% SAVE DATA TO FILE    # MAKE HEADERS     HEADING  = ["STATION","STATION_NAME","ELEVATION","LATITUDE","LONGITUDE","YEAR","MONTH","DAY","HOUR","MINUTE","FZRN_FOUND","REPORTTYPE",                "HOURLYSKYCONDITIONS", "HOURLYVISIBILITY", "PRECIP",                 "HOURLYDRYBULBTEMPF", "HOURLYDRYBULBTEMPC","HOURLYWETBULBTEMPF","HOURLYWETBULBTEMPC",                "HOURLYDewPointTempF", "HOURLYDewPointTempC", "HOURLYRelativeHumidity","HOURLYWindSpeed",                "HOURLYWindDirection", "HOURLYWindGustSpeed", "HOURLYStationPressure","HOURLYPressureTendency",                "HOURLYPressureChange","HOURLYSeaLevelPressure", "HOURLYPrecip", "HOURLYAltimeterSetting", "DAILYMaximumDryBulbTemp",                "DAILYMinimumDryBulbTemp", "DAILYAverageDryBulbTemp", "DAILYDeptFromNormalAverageTemp", "DAILYAverageRelativeHumidity",                "DAILYAverageDewPointTemp", "DAILYAverageWetBulbTemp", "DAILYHeatingDegreeDays", "DAILYCoolingDegreeDays", "DAILYSunrise",                "DAILYSunset", "DAILYWeather","CLOUD_FOUND"]        ## WRITE OUTPUT    #outstring = "/Users/ericallen/Documents/NWS_Research/QualityControl2/"+name+"_reformat.csv"    ## OPEN/READ DATA FILE WITH ARCHIVED AFD    outstring =  outdir+name+"-metadata.csv"    DATAF = np.zeros((len(STATION),len(HEADING)))    #%%    DATAF[:,2] = ELEVATION    DATAF[:,3] = LATITUDE    DATAF[:,4] = LONGITUDE    DATAF[:,5] = year_raw    DATAF[:,6] = month_raw    DATAF[:,7] = day_raw    DATAF[:,8] = hour_raw    DATAF[:,9] = min_raw    DATAF[:,10] = FZRN_FOUND    #DATAF[:,13] = HOURLYVISIBILITY     DATAF[:,15] = HOURLYDRYBULBTEMPF     DATAF[:,16] = HOURLYDRYBULBTEMPC     DATAF[:,17] = HOURLYWETBULBTEMPF     DATAF[:,18] = HOURLYWETBULBTEMPC     DATAF[:,19] = HOURLYDewPointTempF     DATAF[:,20] = HOURLYDewPointTempC     DATAF[:,21] = HOURLYRelativeHumidity    DATAF[:,22] = HOURLYWindSpeed     DATAF[:,23] = HOURLYWindDirection     DATAF[:,24] = HOURLYWindGustSpeed     DATAF[:,25] = HOURLYStationPressure     DATAF[:,26] = HOURLYPressureTendency    DATAF[:,27] = HOURLYPressureChange    DATAF[:,28] = HOURLYSeaLevelPressure    DATAF[:,30] = HOURLYAltimeterSetting    DATAF[:,31] = DAILYMaximumDryBulbTemp     DATAF[:,32] = DAILYMinimumDryBulbTemp     DATAF[:,33] = DAILYAverageDryBulbTemp     DATAF[:,34] = DAILYDeptFromNormalAverageTemp     DATAF[:,35] = DAILYAverageRelativeHumidity     DATAF[:,36] = DAILYAverageDewPointTemp     DATAF[:,37] = DAILYAverageWetBulbTemp     DATAF[:,38] = DAILYHeatingDegreeDays     DATAF[:,39] = DAILYCoolingDegreeDays     DATAF[:,40] = DAILYSunrise     DATAF[:,41] = DAILYSunset     DATAF[:,43] = CLOUD_FOUND         df = pd.DataFrame(DATAF, columns = HEADING)    df['STATION'] = STATION    df['STATION_NAME'] = STATION_NAME    df['REPORTTYPE'] = REPORTTPYE    df['HOURLYSKYCONDITIONS'] = HOURLYSKYCONDITIONS    df['PRECIP'] = PRECIP    df['DAILYWeather'] = DAILYWeather    df['HOURLYPrecip'] = HOURLYPrecip    df['HOURLYVISIBILITY']=HOURLYVISIBILITY              df.to_csv(outstring, index=False)    del data, data2, Date, DATA,DATAF, df    